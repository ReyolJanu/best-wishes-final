const { sendEmail } = require("../config/emailConfig");
const fs = require('fs');
const path = require('path');

exports.sendReportEmail = async (req, res) => {
  try {
    const { email, reportData, pdfData, reportPeriod } = req.body;

    if (!email || !reportData || !pdfData) {
      return res.status(400).json({
        success: false,
        message: "Missing required fields: email, reportData, or pdfData"
      });
    }

    // Generate HTML email content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
          .content { padding: 30px; }
          .metrics { display: flex; flex-wrap: wrap; gap: 20px; margin: 20px 0; }
          .metric-card { background: #f8f9fa; padding: 20px; border-radius: 8px; flex: 1; min-width: 200px; }
          .metric-value { font-size: 24px; font-weight: bold; color: #667eea; }
          .metric-label { font-size: 14px; color: #666; margin-top: 5px; }
          .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; }
          .logo { font-size: 28px; margin-bottom: 10px; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="logo">üéÅ Gift Commerce</div>
          <h1>Analytics Report</h1>
          <p>Comprehensive Order Performance Analysis</p>
        </div>
        
        <div class="content">
          <h2>üìä Executive Summary</h2>
          <p>Please find attached your comprehensive analytics report for <strong>${reportPeriod.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}</strong>.</p>
          
          <div class="metrics">
            <div class="metric-card">
              <div class="metric-value">${reportData.totalOrders}</div>
              <div class="metric-label">Total Orders</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">¬£${reportData.totalRevenue.toFixed(2)}</div>
              <div class="metric-label">Total Revenue</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">¬£${reportData.averageOrderValue.toFixed(2)}</div>
              <div class="metric-label">Average Order Value</div>
            </div>
            <div class="metric-card">
              <div class="metric-value">${((reportData.statusBreakdown.delivered || 0) / reportData.totalOrders * 100).toFixed(1)}%</div>
              <div class="metric-label">Completion Rate</div>
            </div>
          </div>
          
          <h3>üìã Order Status Breakdown</h3>
          <ul>
            ${Object.entries(reportData.statusBreakdown).map(([status, count]) => 
              `<li><strong>${status.charAt(0).toUpperCase() + status.slice(1)}:</strong> ${count} orders (${(count / reportData.totalOrders * 100).toFixed(1)}%)</li>`
            ).join('')}
          </ul>
          
          <h3>üèÜ Top Performing Products</h3>
          <p>The attached PDF report contains detailed analytics including:</p>
          <ul>
            <li>Sales trend analysis with charts</li>
            <li>Complete order status breakdown</li>
            <li>Top ${reportData.topProducts.length} performing products</li>
            <li>Detailed order history (up to 50 recent orders)</li>
            <li>Revenue and performance metrics</li>
          </ul>
          
          <p><strong>Report Generated:</strong> ${new Date().toLocaleString()}</p>
        </div>
        
        <div class="footer">
          <p>This report was automatically generated by the Gift Commerce Admin System.</p>
          <p>For any questions about this report, please contact your system administrator.</p>
        </div>
      </body>
      </html>
    `;

    // Convert base64 PDF to buffer
    const pdfBuffer = Buffer.from(pdfData, 'base64');

    // Send email with PDF attachment
    const emailResult = await sendEmail({
      to: email,
      subject: `Gift Commerce Analytics Report - ${reportPeriod} (${new Date().toLocaleDateString()})`,
      html: htmlContent,
      attachments: [
        {
          filename: `Gift_Commerce_Report_${new Date().toISOString().split('T')[0]}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf'
        }
      ]
    });

    res.status(200).json({
      success: true,
      message: `Report successfully sent to ${email}`,
      messageId: emailResult.messageId
    });

  } catch (error) {
    console.error('Error sending report email:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to send report email',
      error: error.message
    });
  }
};